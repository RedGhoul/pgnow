<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PGNow - All Databases</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body class="bg-light">
    <%- include('partials/header') %>

    <div class="container pb-5">
        <% if (typeof flash !== 'undefined' && flash.error && flash.error.length > 0) { %>
            <div class="alert alert-danger rounded-4 border-0 shadow-sm">
                <%= flash.error %>
            </div>
        <% } %>

        <% if (typeof error !== 'undefined') { %>
            <div class="alert alert-danger rounded-4 border-0 shadow-sm">
                <h4 class="alert-heading">Error</h4>
                <p><%= error %></p>
                <p class="mb-0">Please check your database connection settings and ensure PostgreSQL is running.</p>
            </div>
        <% } else { %>
            <div class="row mb-4">
                <div class="col">
                    <div class="card border-0 shadow-sm rounded-4">
                        <div class="card-header bg-white border-0 py-3">
                            <h5 class="card-title mb-0 text-primary">
                                <i class="bi bi-database-fill"></i> All PostgreSQL Databases
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Name</th>
                                            <th>Size</th>
                                            <th>Owner</th>
                                            <th>Encoding</th>
                                            <th>Connections</th>
                                            <th>Access</th>
                                            <th>Activity</th>
                                            <th>Cache Hit Ratio</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% databases.forEach(db => { 
                                            const totalBlocks = parseInt(db.blocks_read) + parseInt(db.blocks_hit);
                                            const cacheHitRatio = totalBlocks > 0 ? 
                                                (parseInt(db.blocks_hit) / totalBlocks * 100).toFixed(2) : 
                                                0;
                                        %>
                                            <tr class="<%= db.name === currentDb ? 'table-primary' : '' %>">
                                                <td>
                                                    <strong><%= db.name %></strong>
                                                    <% if (db.name === currentDb) { %>
                                                        <span class="badge bg-primary ms-2">Current</span>
                                                    <% } %>
                                                </td>
                                                <td><span class="badge bg-info text-white"><%= db.size %></span></td>
                                                <td><span class="badge bg-secondary"><%= db.owner %></span></td>
                                                <td><%= db.encoding %></td>
                                                <td><span class="badge bg-warning text-dark"><%= db.connections || 0 %></span></td>
                                                <td>
                                                    <span class="badge <%= db.has_access === 'Yes' ? 'bg-success' : 'bg-danger' %>">
                                                        <%= db.has_access %>
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="small">
                                                        <div class="mb-1">
                                                            <i class="bi bi-arrow-down-circle text-success"></i>
                                                            <span class="ms-1">Fetched: <%= parseInt(db.rows_fetched).toLocaleString() || 0 %></span>
                                                        </div>
                                                        <div class="mb-1">
                                                            <i class="bi bi-arrow-up-circle text-primary"></i>
                                                            <span class="ms-1">Returned: <%= parseInt(db.rows_returned).toLocaleString() || 0 %></span>
                                                        </div>
                                                        <div class="mb-1">
                                                            <i class="bi bi-plus-circle text-info"></i>
                                                            <span class="ms-1">Inserted: <%= parseInt(db.rows_inserted).toLocaleString() || 0 %></span>
                                                        </div>
                                                        <div class="mb-1">
                                                            <i class="bi bi-pencil-square text-warning"></i>
                                                            <span class="ms-1">Updated: <%= parseInt(db.rows_updated).toLocaleString() || 0 %></span>
                                                        </div>
                                                        <div>
                                                            <i class="bi bi-trash text-danger"></i>
                                                            <span class="ms-1">Deleted: <%= parseInt(db.rows_deleted).toLocaleString() || 0 %></span>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div class="progress" style="height: 10px;">
                                                        <div class="progress-bar <%= cacheHitRatio < 70 ? 'bg-danger' : (cacheHitRatio < 90 ? 'bg-warning' : 'bg-success') %>" 
                                                            role="progressbar" 
                                                            style="width: <%= cacheHitRatio %>%;" 
                                                            aria-valuenow="<%= cacheHitRatio %>" 
                                                            aria-valuemin="0" 
                                                            aria-valuemax="100">
                                                        </div>
                                                    </div>
                                                    <div class="small mt-2">
                                                        <strong><%= cacheHitRatio %>%</strong>
                                                        <div class="text-muted mt-1">
                                                            <small>Reads: <%= parseInt(db.blocks_read).toLocaleString() || 0 %></small>
                                                            <small class="ms-2">Hits: <%= parseInt(db.blocks_hit).toLocaleString() || 0 %></small>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row g-4">
                <div class="col-md-6">
                    <div class="card border-0 shadow-sm rounded-4">
                        <div class="card-header bg-white border-0 py-3">
                            <h5 class="card-title mb-0 text-success">
                                <i class="bi bi-bar-chart"></i> Transaction Statistics
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Database</th>
                                            <th>Commits</th>
                                            <th>Rollbacks</th>
                                            <th>Commit Ratio</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% databases.forEach(db => { 
                                            const totalTransactions = parseInt(db.commits) + parseInt(db.rollbacks);
                                            const commitRatio = totalTransactions > 0 ? 
                                                (parseInt(db.commits) / totalTransactions * 100).toFixed(2) : 
                                                100;
                                        %>
                                            <tr>
                                                <td><strong><%= db.name %></strong></td>
                                                <td><span class="badge bg-success"><%= parseInt(db.commits).toLocaleString() || 0 %></span></td>
                                                <td><span class="badge bg-danger"><%= parseInt(db.rollbacks).toLocaleString() || 0 %></span></td>
                                                <td>
                                                    <div class="progress" style="height: 10px;">
                                                        <div class="progress-bar bg-success" 
                                                            role="progressbar" 
                                                            style="width: <%= commitRatio %>%;" 
                                                            aria-valuenow="<%= commitRatio %>" 
                                                            aria-valuemin="0" 
                                                            aria-valuemax="100">
                                                        </div>
                                                    </div>
                                                    <small class="mt-2 d-block"><strong><%= commitRatio %>%</strong></small>
                                                </td>
                                            </tr>
                                        <% }) %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card border-0 shadow-sm rounded-4">
                        <div class="card-header bg-white border-0 py-3">
                            <h5 class="card-title mb-0 text-info">
                                <i class="bi bi-pie-chart"></i> Database Size Distribution
                            </h5>
                        </div>
                        <div class="card-body">
                            <canvas id="dbSizeChart" height="250"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
    </div>

    <%- include('partials/footer') %>
    
    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            try {
                const canvas = document.getElementById('dbSizeChart');
                if (!canvas) {
                    console.error('Chart canvas not found');
                    return;
                }

                <% if (typeof databases !== 'undefined' && databases && databases.length > 0) { %>
                    const ctx = canvas.getContext('2d');
                    
                    // Extract and validate data
                    const dbData = [];
                    <% databases.forEach(function(db) { %>
                        dbData.push({
                            name: '<%= db.name %>',
                            size: '<%= db.size %>'
                        });
                    <% }); %>

                    if (dbData.length === 0) {
                        console.error('No database data available');
                        return;
                    }

                    // Convert size strings to bytes
                    function convertToBytes(sizeStr) {
                        const units = {
                            'bytes': 1,
                            'kb': 1024,
                            'mb': 1024 * 1024,
                            'gb': 1024 * 1024 * 1024,
                            'tb': 1024 * 1024 * 1024 * 1024
                        };
                        
                        const matches = sizeStr.toLowerCase().match(/^([\d.]+)\s*([kmgt]?b)(?:ytes)?$/);
                        if (!matches) return 0;
                        
                        const size = parseFloat(matches[1]);
                        const unit = matches[2];
                        
                        return size * (units[unit] || 1);
                    }

                    function formatBytes(bytes) {
                        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
                        if (bytes === 0) return '0 Bytes';
                        const i = Math.floor(Math.log(bytes) / Math.log(1024));
                        return parseFloat((bytes / Math.pow(1024, i)).toFixed(2)) + ' ' + sizes[i];
                    }

                    // Process data
                    const labels = dbData.map(db => db.name);
                    const sizes = dbData.map(db => convertToBytes(db.size));
                    const total = sizes.reduce((a, b) => a + b, 0);

                    // Generate colors
                    const colors = labels.map((_, i) => {
                        const hue = (i * 137.5 + 15) % 360;  // Golden angle approximation
                        return `hsla(${hue}, 70%, 70%, 0.8)`;
                    });

                    // Create chart
                    new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: labels,
                            datasets: [{
                                data: sizes,
                                backgroundColor: colors,
                                borderColor: 'white',
                                borderWidth: 2
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'right',
                                    labels: {
                                        font: { size: 12 },
                                        padding: 20,
                                        usePointStyle: true
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const value = context.raw;
                                            const percentage = ((value / total) * 100).toFixed(1);
                                            return `${context.label}: ${formatBytes(value)} (${percentage}%)`;
                                        }
                                    }
                                }
                            },
                            cutout: '60%'
                        }
                    });
                <% } else { %>
                    console.log('No database data available for chart');
                    canvas.style.display = 'none';
                <% } %>
            } catch (error) {
                console.error('Error creating chart:', error);
            }
        });
    </script>

    <style>
    .table th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.5px;
    }

    .badge {
        font-weight: 500;
    }

    .progress {
        border-radius: 0.5rem;
        background-color: #e9ecef;
    }

    .card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;
    }

    .rounded-4 {
        border-radius: 1rem !important;
    }

    .pb-5 {
        padding-bottom: 6rem !important;
    }
    </style>
</body>
</html> 